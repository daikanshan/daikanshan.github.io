<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lisiur&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://daikanshan.github.io/"/>
  <updated>2016-05-10T05:32:17.227Z</updated>
  <id>http://daikanshan.github.io/</id>
  
  <author>
    <name>Lisiur</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LinuxShell-初识</title>
    <link href="http://daikanshan.github.io/2016/05/08/LinuxShell-%E5%88%9D%E8%AF%86/"/>
    <id>http://daikanshan.github.io/2016/05/08/LinuxShell-初识/</id>
    <published>2016-05-08T14:42:39.000Z</published>
    <updated>2016-05-10T05:32:17.227Z</updated>
    
    <content type="html">&lt;h1 id=&quot;shell脚本&quot;&gt;&lt;a href=&quot;#shell脚本&quot; class=&quot;headerlink&quot; title=&quot;shell脚本&quot;&gt;&lt;/a&gt;shell脚本&lt;/h1&gt;&lt;p&gt;shell脚本就是一些文件，我们能将一系列需要执行的命令写入其中，然后通过shell执行。&lt;/p&gt;
&lt;h2 id=&quot;shell脚本的执行&quot;&gt;&lt;a href=&quot;#shell脚本的执行&quot; class=&quot;headerlink&quot; title=&quot;shell脚本的执行&quot;&gt;&lt;/a&gt;shell脚本的执行&lt;/h2&gt;&lt;p&gt;shell脚本通常是一个以shebang起始的文本文件：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;代表该脚本将由&lt;code&gt;/bin/bash&lt;/code&gt;解析执行&lt;/p&gt;
&lt;p&gt;有两种运行脚本的方式。一种是将脚本作为bash的命令行参数另一种是授予脚本执行权限，将其变成科执行文件。&lt;/p&gt;
&lt;p&gt;将脚本作为命令行运行方式如下：&lt;/p&gt;
&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ bash &lt;span class=&quot;keyword&quot;&gt;script&lt;/span&gt;.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果将脚本作为命令行参数使用则可以不使用shebang。&lt;/p&gt;
&lt;p&gt;将脚本作为可执行文件来执行，需要现将其赋予执行权限：&lt;/p&gt;
&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ chmod a+x &lt;span class=&quot;keyword&quot;&gt;script&lt;/span&gt;.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后便可像下面这样执行：&lt;/p&gt;
&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ./&lt;span class=&quot;keyword&quot;&gt;script&lt;/span&gt;.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;内核会读取脚本的首行并注意到shebang为&lt;code&gt;#!/bin/bash&lt;/code&gt; 。它识别出/bin/bash并在内部像这样执行该脚本：&lt;br&gt;$ /bin/bash script.sh&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;终端打印&quot;&gt;&lt;a href=&quot;#终端打印&quot; class=&quot;headerlink&quot; title=&quot;终端打印&quot;&gt;&lt;/a&gt;终端打印&lt;/h1&gt;&lt;p&gt;终端是交互式工具，用户可以通过它与shell环境进行交互。&lt;/p&gt;
&lt;h2 id=&quot;echo&quot;&gt;&lt;a href=&quot;#echo&quot; class=&quot;headerlink&quot; title=&quot;echo&quot;&gt;&lt;/a&gt;echo&lt;/h2&gt;&lt;p&gt;在默认情况下，echo在每次调用后会添加一个换行符。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Welcome to Bash&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;Welcome to Bash&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用&lt;code&gt;-n&lt;/code&gt;参数可以忽略默认的换行。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;string&quot;&gt;&#39;Welcome to Bash&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;Welcome to Bash%&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不带双引号也可以打印出相同的结果：&lt;/p&gt;
&lt;figure class=&quot;highlight sqf&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; Welcome &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; Bash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;Welcome to Bash&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用单引号也可以完成相同的任务，但与双引号略有不同。&lt;/p&gt;
&lt;p&gt;单引号是强引用，双引号是弱引用。&lt;/p&gt;
&lt;p&gt;单引号里的所有内容会被全部照样输出，双引号会先进行必要的转义之后才会输出。&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Welcome\nto\nBash&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;Welcome\nto\nBash&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Welcome\nto\nBash&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;Welcom&lt;br&gt;to&lt;br&gt;Bash&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以使用&lt;code&gt;-e&lt;/code&gt;参数强制转义输出：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Welcome\nto\nBash&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;Welcom&lt;br&gt;to&lt;br&gt;Bash&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;printf&quot;&gt;&lt;a href=&quot;#printf&quot; class=&quot;headerlink&quot; title=&quot;printf&quot;&gt;&lt;/a&gt;printf&lt;/h2&gt;&lt;p&gt;printf使用的参数和C语言中的printf函数一样。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;Hello World&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;printf可以使用格式化字符串，默认情况下printf不会像echo一样自动添加换行符。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#filename: printf.sh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;%-5s %-10s %-4s\n&quot;&lt;/span&gt; No Name Mark&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;%-5s %-10s %-4.2s\n&quot;&lt;/span&gt; 1 Sarath 80.3456&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;%-5s %-10s %-4.2s\n&quot;&lt;/span&gt; 2 James 90.9989&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;%-5s %-10s %-4.2s\n&quot;&lt;/span&gt; 3 Jeff 77.564&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;No　 Name　　Mark&lt;br&gt;1　　Sarath　　80.35&lt;br&gt;2　　James　　 91.00&lt;br&gt;3　　Jeff　　 　77.56&lt;/p&gt;
&lt;p&gt;%-5s 指明了一个格式为左对齐且宽度为5的字符串替换。如果不使用&lt;code&gt;-&lt;/code&gt;指定对其方式，字符串就会采用右对齐形式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;变量、环境变量&quot;&gt;&lt;a href=&quot;#变量、环境变量&quot; class=&quot;headerlink&quot; title=&quot;变量、环境变量&quot;&gt;&lt;/a&gt;变量、环境变量&lt;/h1&gt;&lt;p&gt;查看进程相关变量：&lt;/p&gt;
&lt;figure class=&quot;highlight mel&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cat /&lt;span class=&quot;keyword&quot;&gt;proc&lt;/span&gt;/$PID/environ&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;grep vim&lt;/code&gt;# 获取vim进程的ID&lt;br&gt;&lt;code&gt;cat /proc/$PID/environ | tr &amp;#39;\0&amp;#39; &amp;#39;\n&amp;#39;&lt;/code&gt; # 优化输出&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;赋值&quot;&gt;&lt;a href=&quot;#赋值&quot; class=&quot;headerlink&quot; title=&quot;赋值&quot;&gt;&lt;/a&gt;赋值&lt;/h2&gt;&lt;p&gt;赋值&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var=&lt;span class=&quot;string&quot;&gt;&#39;value&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 不能写成var = &#39;value&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;``` &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;引用变量：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$var&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$&amp;#123;var&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以在双引号中引用变量：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$var&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;设置环境变量&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;HTTP_PROXY=192.168.1.23.3128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;expot HTTP_PROXY&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在PATH中添加路径：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; PATH=&lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$PATH&lt;/span&gt;:/home/usr/bin&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;获取字符长度：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$&amp;#123;\#var&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;获取当前shell：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$SHELL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;在.bashrc中添加下面函数：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;prepend&lt;/span&gt;&lt;/span&gt;() &amp;#123; [ &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$2&lt;/span&gt;&quot;&lt;/span&gt; ] &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt;=\&lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$2&lt;/span&gt;\$\&amp;#123;&lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt;:+&#39;:&#39;\$&lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt;\&amp;#125;\&quot; &amp;amp;&amp;amp; export &lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt;;  &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;则可以直接这样添加路径：&lt;br&gt;&lt;code&gt;prepend PATH /home/usr/bin&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;shell脚本&quot;&gt;&lt;a href=&quot;#shell脚本&quot; class=&quot;headerlink&quot; title=&quot;shell脚本&quot;&gt;&lt;/a&gt;shell脚本&lt;/h1&gt;&lt;p&gt;shell脚本就是一些文件，我们能将一系列需要执行的命令写入其中，然后通过shell执行。&lt;/p&gt;

    
    </summary>
    
      <category term="linux" scheme="http://daikanshan.github.io/categories/linux/"/>
    
    
      <category term="shell" scheme="http://daikanshan.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>shell的边边角角</title>
    <link href="http://daikanshan.github.io/2016/05/05/%E7%8E%A9%E8%BD%ACshell%E8%84%9A%E6%9C%AC/"/>
    <id>http://daikanshan.github.io/2016/05/05/玩转shell脚本/</id>
    <published>2016-05-05T09:16:36.000Z</published>
    <updated>2016-05-06T01:30:39.174Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;该文章主要记录shell有趣的玩法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;打印彩色输出&quot;&gt;&lt;a href=&quot;#打印彩色输出&quot; class=&quot;headerlink&quot; title=&quot;打印彩色输出&quot;&gt;&lt;/a&gt;打印彩色输出&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;\e[1;31m This is red text \e[0m&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;文字颜色 =&amp;gt; 重置：0，黑色：30，红色：31，绿色：32，黄色：33，蓝色：34，洋红：35，青色：36，白色：37&lt;br&gt;背景颜色 =&amp;gt; 重置：0，黑色：40，红色：41，绿色：42，黄色：43，蓝色：44，洋红：45，青色：46，白色：47&lt;br&gt;将&lt;code&gt;31&lt;/code&gt;替换成对应颜色码即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;检查是否为超级用户&quot;&gt;&lt;a href=&quot;#检查是否为超级用户&quot; class=&quot;headerlink&quot; title=&quot;检查是否为超级用户&quot;&gt;&lt;/a&gt;检查是否为超级用户&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$UID&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;超级用户返回&lt;code&gt;0&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;文件重定向&quot;&gt;&lt;a href=&quot;#文件重定向&quot; class=&quot;headerlink&quot; title=&quot;文件重定向&quot;&gt;&lt;/a&gt;文件重定向&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;文件描述符&lt;br&gt;0 :  stdin&lt;br&gt;1 :  stdout&lt;br&gt;2 :  stderr&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight dockerfile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;echo &quot;This is a sample text1&quot; &amp;gt; temp.txt        &lt;span class=&quot;comment&quot;&gt;# 清空temp.txt 然后将标准输出重定向到temp.txt&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo &quot;This is another sample text2&quot; &amp;gt;&amp;gt; temp.txt &lt;span class=&quot;comment&quot;&gt;# 将标准输出追加到temp.txt&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ls + 2&amp;gt; out.txt                                 &lt;span class=&quot;comment&quot;&gt;# 将错误信息重定向到out.txt&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;bash&quot;&gt;2&amp;gt; stderr.txt 1&amp;gt; stdout.txt                   &lt;span class=&quot;comment&quot;&gt;# 将错误信息重定向到stderr.txt,标准输出重定向到stdout.txt&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;bash&quot;&gt;2&amp;gt;&amp;amp;1 output.txt                             &lt;span class=&quot;comment&quot;&gt;# 将标准输出和错误重定向到output.txt&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;bash&quot;&gt;&amp;amp;&amp;gt; output.txt                               &lt;span class=&quot;comment&quot;&gt;# 同上(只适用于bourne shell,且不适用于追加)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;bash&quot;&gt;1&amp;gt; output.txt 2&amp;gt;&amp;amp;1                          &lt;span class=&quot;comment&quot;&gt;# 同上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;bash&quot;&gt;2&amp;gt; /dev/null                                &lt;span class=&quot;comment&quot;&gt;# 将错误信息丢弃&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;\&amp;lt;  =&amp;gt; 0&amp;lt;&lt;br&gt;&gt;  =&amp;gt; 1&amp;gt;&lt;br&gt;&gt;&gt; =&amp;gt; 1&amp;gt;&amp;gt;&lt;br&gt;/dev/null 是只写文件，所有写入的信息都将被抛弃&lt;br&gt;/dev/zero &lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight axapta&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rm /var/www/&lt;span class=&quot;keyword&quot;&gt;index&lt;/span&gt;.html &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;gt;/dev/&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;              &lt;span class=&quot;meta&quot;&gt;# 将标准错误删除&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;录制并回放终端会话&quot;&gt;&lt;a href=&quot;#录制并回放终端会话&quot; class=&quot;headerlink&quot; title=&quot;录制并回放终端会话&quot;&gt;&lt;/a&gt;录制并回放终端会话&lt;/h1&gt;&lt;figure class=&quot;highlight lasso&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;script &lt;span class=&quot;attr&quot;&gt;-t&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;gt; timing.&lt;span class=&quot;keyword&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;-a&lt;/span&gt; output.session&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; commands;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;exit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scriptreplay timing.&lt;span class=&quot;keyword&quot;&gt;log&lt;/span&gt; output.session&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;反序输出&quot;&gt;&lt;a href=&quot;#反序输出&quot; class=&quot;headerlink&quot; title=&quot;反序输出&quot;&gt;&lt;/a&gt;反序输出&lt;/h1&gt;&lt;figure class=&quot;highlight accesslog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tac &lt;span class=&quot;string&quot;&gt;[filename]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;监控&quot;&gt;&lt;a href=&quot;#监控&quot; class=&quot;headerlink&quot; title=&quot;监控&quot;&gt;&lt;/a&gt;监控&lt;/h1&gt;&lt;figure class=&quot;highlight accesslog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tail -f &lt;span class=&quot;string&quot;&gt;[file]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;该文章主要记录shell有趣的玩法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;打印彩色输出&quot;&gt;&lt;a href=&quot;#打印彩色输出&quot; class=&quot;headerlink&quot; title=&quot;打印彩色输出&quot;&gt;&lt;/a&gt;打印彩色输出&lt;/h1&gt;&lt;fig
    
    </summary>
    
      <category term="linux" scheme="http://daikanshan.github.io/categories/linux/"/>
    
    
      <category term="shell" scheme="http://daikanshan.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>二叉树</title>
    <link href="http://daikanshan.github.io/2016/05/04/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://daikanshan.github.io/2016/05/04/二叉树/</id>
    <published>2016-05-04T07:51:40.000Z</published>
    <updated>2016-05-04T09:00:51.029Z</updated>
    
    <content type="html">&lt;h1 id=&quot;1-二叉树的定义&quot;&gt;&lt;a href=&quot;#1-二叉树的定义&quot; class=&quot;headerlink&quot; title=&quot;1 二叉树的定义&quot;&gt;&lt;/a&gt;1 二叉树的定义&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;二叉树要么为空，要么由根节点、左子树和右子树组成，而左子树和右子树分别是一颗二叉树。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-2-特殊的二叉树&quot;&gt;&lt;a href=&quot;#1-2-特殊的二叉树&quot; class=&quot;headerlink&quot; title=&quot;1.2 特殊的二叉树&quot;&gt;&lt;/a&gt;1.2 特殊的二叉树&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;满二叉树：一颗深度为h且有2&lt;sup&gt;h&lt;/sup&gt;-1个结点的二叉树。&lt;/p&gt;
&lt;p&gt;完全二叉树： 若设二叉树的高度为h，除第h层外，其他各层的节点数都达到最大个数，第h层从右到左连续缺少若干结点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;2-完全二叉树的特点&quot;&gt;&lt;a href=&quot;#2-完全二叉树的特点&quot; class=&quot;headerlink&quot; title=&quot;2 完全二叉树的特点&quot;&gt;&lt;/a&gt;2 完全二叉树的特点&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;完全二叉树可以使用一维数组存储，&lt;br&gt;如果一个完全二叉树的父结点为k，那么他的左儿子的编号就是2*k，右儿子编号就是2*k+1。&lt;br&gt;如果一个完全二叉树的子结点为k，那么他的父结点的编号为k/2。&lt;br&gt;另外&lt;br&gt;如果一个完全二叉树的节点数为N，那么他的高度为log2N,简写为logN。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;3-完全二叉树的应用&quot;&gt;&lt;a href=&quot;#3-完全二叉树的应用&quot; class=&quot;headerlink&quot; title=&quot;3 完全二叉树的应用&quot;&gt;&lt;/a&gt;3 完全二叉树的应用&lt;/h1&gt;&lt;h2 id=&quot;3-1-堆&quot;&gt;&lt;a href=&quot;#3-1-堆&quot; class=&quot;headerlink&quot; title=&quot;3.1 堆&quot;&gt;&lt;/a&gt;3.1 堆&lt;/h2&gt;&lt;h3 id=&quot;3-1-1-堆的定义&quot;&gt;&lt;a href=&quot;#3-1-1-堆的定义&quot; class=&quot;headerlink&quot; title=&quot;3.1.1 堆的定义&quot;&gt;&lt;/a&gt;3.1.1 堆的定义&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;堆是一种特殊的完全二叉树。&lt;br&gt;若所有的父结点都比子结点要小，则称为最小堆。&lt;br&gt;若所有的父结点都比子结点要大，则称为最大堆。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-二叉树的定义&quot;&gt;&lt;a href=&quot;#1-二叉树的定义&quot; class=&quot;headerlink&quot; title=&quot;1 二叉树的定义&quot;&gt;&lt;/a&gt;1 二叉树的定义&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;二叉树要么为空，要么由根节点、左子树和右子树组成，而左子树和右子树
    
    </summary>
    
      <category term="algorithms" scheme="http://daikanshan.github.io/categories/algorithms/"/>
    
    
      <category term="二叉树" scheme="http://daikanshan.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>欧拉函数</title>
    <link href="http://daikanshan.github.io/2016/05/01/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/"/>
    <id>http://daikanshan.github.io/2016/05/01/欧拉函数/</id>
    <published>2016-05-01T08:24:07.000Z</published>
    <updated>2016-05-01T08:55:25.162Z</updated>
    
    <content type="html">&lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;假设φ(n)表示1..n-1中与n互质的数的个数。&lt;/p&gt;
&lt;p&gt;求解属于给定区间[L,R]中的值K，&lt;/p&gt;
&lt;p&gt;对于[L,R]中的任意一个除K以外的整数y，满足φ(K)≤φ(y)且φ(K)=φ(y)时，K\&amp;lt;y。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;欧拉函数&quot;&gt;&lt;a href=&quot;#欧拉函数&quot; class=&quot;headerlink&quot; title=&quot;欧拉函数&quot;&gt;&lt;/a&gt;欧拉函数&lt;/h1&gt;&lt;p&gt;定义：小于n的正整数中与n互质的数的个数。&lt;/p&gt;
&lt;p&gt;对于φ(n)，我们有这样三个性质：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(1) 若n为素数，则&lt;code&gt;φ(n) = n - 1&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;显然，由于n为素数，1..n-1与n都只有公因子1，因此&lt;code&gt;φ(n) = n - 1&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(2) 若&lt;code&gt;n = p^k&lt;/code&gt;，p为素数（即n为单个素数的整数幂），则&lt;code&gt;φ(n) = (p-1)*p^(k-1)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因为n是p的整数幂，因此所有p的倍数和n都不互质。小于n的p的倍数一共有&lt;code&gt;p^(k-1)-1&lt;/code&gt;个，因此和n互质的个数为：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;p^k-1 - (p^(k-1)-1) = p^k - p^(k-1) = (p-1)*p^(k-1)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(3) 若p和q互质，则&lt;code&gt;φ(p*q) = φ(p) * φ(q)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于所有小于pq的整数u，可以表示为&lt;code&gt;u=aq+r&lt;/code&gt;。(a=0,1,2,…,p-1，r=0,1,…,q-1)。&lt;/p&gt;
&lt;p&gt;对于&lt;code&gt;u = aq + r&lt;/code&gt;, 设&lt;code&gt;R = u mod p，0≤R&amp;lt;q&lt;/code&gt;。对于一个固定的r，设a1, a2满足&lt;code&gt;0 &amp;lt;= a1, a2 &amp;lt; p且a1≠a2&lt;/code&gt;，有：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;u1 = a1*q+r, u2 = a2*q+r&lt;/code&gt;&lt;br&gt;&lt;code&gt;u1-u2=(a1-a2)*q&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;因为p与q互质，且&lt;code&gt;|a1-a2|&amp;lt;p&lt;/code&gt;，则|u1-u2|一定不是p的倍数。&lt;/p&gt;
&lt;p&gt;所以对于每一个固定的r，其对应的&lt;code&gt;p个u = a*q+r(a=0,1,2,...,p-1)&lt;/code&gt;对&lt;code&gt;mod p&lt;/code&gt;来说余数都不相同，即&lt;code&gt;u mod p&lt;/code&gt;的结果恰好取遍0,1,…,p-1中的每一个数。&lt;/p&gt;
&lt;p&gt;下面我证明一个引理：&lt;code&gt;u mod p与p互质 &amp;lt;=&amp;gt; u与p互质&lt;/code&gt;，其证明如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;假设a,b互质,c = a mod b。&lt;br&gt;假设c与b不互质，则存在d≥1，使得c=nd, b=md。&lt;br&gt;由于c = a mod b，因此a = kb + c，&lt;br&gt;则a = kmd + nd = (kn+m)d&lt;br&gt;因此d是a,b的公因数，与a,b互质矛盾。&lt;br&gt;假设不成立，所以c与b互质。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因此对于任意一个确定的r，与其对应的p个u中恰好有φ(p)个与p互质。&lt;/p&gt;
&lt;p&gt;同理，由u = aq + r知r与q互质 &amp;lt;=&amp;gt; u与q互质。因此在0..q-1中恰好有φ(q)个r使得u与q互质。&lt;/p&gt;
&lt;p&gt;综上，当r与q互质的情况下，固定r可以得到φ(p)个与p和q都互质的数。&lt;/p&gt;
&lt;p&gt;满足条件的r一共用φ(q)个，所以一共能找到有φ(p) * φ(q)个与p和q都互质的数。&lt;/p&gt;
&lt;p&gt;由此得证：&lt;code&gt;φ(p*q) = φ(p) * φ(q)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;若p为质数，n为任意整数：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(1) 若p为n的约数，则&lt;code&gt;φ(n*p) = φ(n) * p&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;若p为n的约数，且p为质数。则我们可以将n表示为&lt;code&gt;p^k*m&lt;/code&gt;。m表示其他和p不同的质数的乘积。&lt;/p&gt;
&lt;p&gt;显然有p^k与m互质，则：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;φ(n) = φ(p^k)*φ(m) = (p-1)*p^(k-1)*φ(m)&lt;/code&gt;&lt;br&gt;&lt;code&gt;φ(n*p) = φ(p^(k+1))*φ(m) = (p-1)*p^k*φ(m) = (p-1)*p^(k-1)*φ(m) * p =  φ(n) * p&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(2) 若p为不为n的约数，则&lt;code&gt;φ(n*p) = φ(n) * (p-1)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由p不为n的约数，因此p与n互质，所以&lt;code&gt;φ(n*p) = φ(n) * φ(p) = φ(n)*(p-1)&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; MAX = &lt;span class=&quot;number&quot;&gt;5000005&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; isPrime[MAX];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; primeList[MAX];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; phi[MAX];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;euler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; primeCount = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;i&amp;lt;MAX;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(isPrime[i])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      primeCount++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      primeList[primeCount] = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      phi[i] = i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;j&amp;lt;=primeCount;j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(i*primeList[j] &amp;gt;= MAX) &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       isPrime[i*primeList[j]] = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(i%primeList[j]==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         phi[i*primeList[j]] = phi[i] * primeList[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          phi[i*primeList[j]] = phi[i] * (primeList[j]&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; l,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; r)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; _min = &lt;span class=&quot;number&quot;&gt;5000001&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; index = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=l;i&amp;lt;=r;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(_min&amp;gt;phi[i]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      _min = phi[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      index = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return index;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(isPrime,&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(isPrime));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(primeList,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(primeList));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(phi,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(phi));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; l,r;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  euler();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt;&amp;gt;&amp;gt;l&amp;gt;&amp;gt;r)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;func(l,r)&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;假设φ(n)表示1..n-1中与n互质的数的个数。&lt;/p&gt;
&lt;p&gt;求解属于给定区间[L,R]中的值K，&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="algorithms" scheme="http://daikanshan.github.io/categories/algorithms/"/>
    
    
      <category term="欧拉函数" scheme="http://daikanshan.github.io/tags/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>背包九讲</title>
    <link href="http://daikanshan.github.io/2016/04/30/%E8%83%8C%E5%8C%85%E4%B9%9D%E8%AE%B2/"/>
    <id>http://daikanshan.github.io/2016/04/30/背包九讲/</id>
    <published>2016-04-30T11:42:00.000Z</published>
    <updated>2016-04-30T12:50:59.254Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;《背包问题九讲》笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;第一讲-01背包问题&quot;&gt;&lt;a href=&quot;#第一讲-01背包问题&quot; class=&quot;headerlink&quot; title=&quot;第一讲 01背包问题&quot;&gt;&lt;/a&gt;第一讲 01背包问题&lt;/h1&gt;&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;有N件物品和一个容量为V的背包。第i件物品的费用是c[i],价值是w[i]。求解将哪些物品装入背包可使价&lt;br&gt;值总和最大。&lt;/p&gt;
&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;p&gt;用子问题定义状态：即f[i][v]表示前i件物品恰放入一个容量为v的背包可以获得的最大价值。则其状态转移方程为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; &lt;code&gt;f[i][v]=max{f[i-1][v],f[i-1][v-c[i]]+w[i]}&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;需要说明的一点是，如果f[i][v]已经被求解，则其表示当前v重量下的最优解。&lt;br&gt;也就是说，在求解f[i][v]时，所有f[p]&lt;a href=&quot;p\&amp;lt;i || p==i &amp;amp;&amp;amp; q\&amp;lt;V&quot;&gt;q&lt;/a&gt;的值都是p件物品，q重量下的最优解。&lt;/p&gt;
&lt;p&gt;此时求i件物品在v重量下的最优解，我们只需考虑，第i件物品拿不拿两种情况，&lt;br&gt;若拿，则f[i][v] = f[i-1]&lt;a href=&quot;前i-1件物品，v-c[i]重量下的最优解&quot;&gt;v-c[i]&lt;/a&gt;+w[i]&lt;br&gt;若不拿，则f[i][v] = f[i-1]&lt;a href=&quot;前i-1件物品，v重量下的最优解&quot;&gt;v&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;优化空间复杂度&quot;&gt;&lt;a href=&quot;#优化空间复杂度&quot; class=&quot;headerlink&quot; title=&quot;优化空间复杂度&quot;&gt;&lt;/a&gt;优化空间复杂度&lt;/h2&gt;&lt;p&gt;以上方法的时间和空间复杂度均为O(VN),其中时间复杂度应该已经不能再优化了,但空间复杂度却可以&lt;br&gt;优化到O。&lt;br&gt;先考虑上面讲的基本思路如何实现,肯定是有一个主循环i=1..N,每次算出来二维数组f[i][0..V]的所有值。&lt;br&gt;那么,如果只用一个数组f[0..V],能不能保证第i次循环结束后f[v]中表示的就是我们定义的状态f[i][v]呢?&lt;br&gt;f[i][v]是由f[i-1][v]和f[i-1][v-c[i]]两个子问题递推而来,能否保证在推f[i][v]时(也即在第i次主循环中推f[v]时)能够得到f[i-1][v]和f[i-1][v-c[i]]的值呢?&lt;br&gt;事实上,这要求在每次主循环中我们以v=V..0的顺序推f[v],这样才能保证推f[v]时f[v-c[i]]保存的是状态f[i-1][v-c[i]]的值。(以上为原文)&lt;br&gt;伪代码如下:&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;.N&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; v = V.&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f[v] = max&amp;#123;f[v],f[v-c[i]]+w[i]&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;理解上一段话和伪代码很重要，我们之所以要把V逆序，是因为我们希望在推第i个f[v]（f[i][v]）时，第i-1个f[v]（f[i-1][v]）和f&lt;a href=&quot;f[i-1][v-c[i]]&quot;&gt;v-c[i]&lt;/a&gt;都已经是最优解。&lt;br&gt;换句话说我们要推较大的v时需要知道较小的v，这样就不能先对较小的v做出改变，不然较大的v就没法算了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;《背包问题九讲》笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;第一讲-01背包问题&quot;&gt;&lt;a href=&quot;#第一讲-01背包问题&quot; class=&quot;headerlink&quot; title=&quot;第一讲 01背包问题&quot;&gt;&lt;/a&gt;第一讲 01背包问题&lt;
    
    </summary>
    
      <category term="算法" scheme="http://daikanshan.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="背包" scheme="http://daikanshan.github.io/tags/%E8%83%8C%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>threejs使用概述</title>
    <link href="http://daikanshan.github.io/2016/04/30/threejs%E4%BD%BF%E7%94%A8%E6%A6%82%E8%BF%B0/"/>
    <id>http://daikanshan.github.io/2016/04/30/threejs使用概述/</id>
    <published>2016-04-30T05:34:56.000Z</published>
    <updated>2016-04-30T05:35:40.822Z</updated>
    
    <content type="html">&lt;h1 id=&quot;创建三维图像的一般步骤&quot;&gt;&lt;a href=&quot;#创建三维图像的一般步骤&quot; class=&quot;headerlink&quot; title=&quot;创建三维图像的一般步骤&quot;&gt;&lt;/a&gt;创建三维图像的一般步骤&lt;/h1&gt;&lt;h2 id=&quot;1-创建HTML的基本骨架&quot;&gt;&lt;a href=&quot;#1-创建HTML的基本骨架&quot; class=&quot;headerlink&quot; title=&quot;1. 创建HTML的基本骨架&quot;&gt;&lt;/a&gt;1. 创建HTML的基本骨架&lt;/h2&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;My first WebGL&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 为了更好的展示效果，不然会有溢出 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        body&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            margin:0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            overflow: hidden;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 引入three.js库 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;../lib/three.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;WebGL-output&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-创建场景&quot;&gt;&lt;a href=&quot;#2-创建场景&quot; class=&quot;headerlink&quot; title=&quot;2. 创建场景&quot;&gt;&lt;/a&gt;2. 创建场景&lt;/h2&gt;&lt;p&gt;场景是所有使用threejs创建的3D对象的容器。这些3D对象只能在场景中才能被渲染。创建场景（scene）的代码很简单只需要一行代码：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; scene = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; THREE.Scene();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;3-创建相机&quot;&gt;&lt;a href=&quot;#3-创建相机&quot; class=&quot;headerlink&quot; title=&quot;3. 创建相机&quot;&gt;&lt;/a&gt;3. 创建相机&lt;/h2&gt;&lt;p&gt;可以把相机想象成人的眼睛，正像人如果没有眼睛将什么也看不到一样，如果没有相机你将看不到任何东西。创建相机（camara）的代码也很简单：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** 相机有两种类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  正投影相机和透视相机&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  正投影相机所看到的物体的大小与其位置无关（想象下“模拟城市”的游戏场景）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  透视相机所看到的物体是最自然的视图，相同大小的物体会根据距离相机的远近而显示出不同的大小。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 正投影相机 args=[left,right,top,bottom,near,far](想象成正六面体六个面的位置)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; orthographicCamera = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; THREE.OrthographicCamera(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.innerWidth / &lt;span class=&quot;number&quot;&gt;-16&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.innerWidth / &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.innerHeight / &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.innerHeight / &lt;span class=&quot;number&quot;&gt;-16&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;-200&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 透视相机 args=[fov,aspect,near,far](fov:视场推荐45°，aspect:长宽比，near:从相机多近的地方渲染，far:相机最多能看多远)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; perspectiveCamera = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; THREE.PerspectiveCamera(&lt;span class=&quot;number&quot;&gt;45&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.innerWidth / &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.innerHeight, &lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;4-创建灯光&quot;&gt;&lt;a href=&quot;#4-创建灯光&quot; class=&quot;headerlink&quot; title=&quot;4. 创建灯光&quot;&gt;&lt;/a&gt;4. 创建灯光&lt;/h2&gt;&lt;p&gt;上帝说要有光。所以你懂的，如果没有光，上帝创建的世界还有什么意义呢？Threejs提供了多种光源，基本上能够模拟现实生活中大多数的光源。这里先介绍几种，以后再详细介绍。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** 环境基础光AmbientLight&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  环境基础光不能作为场景的唯一的光源，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  其主要作用是弱化阴影。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ambiColor = &lt;span class=&quot;string&quot;&gt;&#39;#0c0c0c&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ambientLight = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; THREE.AmbientLight(ambiColor);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** 聚光灯光源 SpotLight&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  具有锥形效果的光源，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  也是最长用到的一种光源,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  特别是需要生成阴影时。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pointColor = &lt;span class=&quot;string&quot;&gt;&quot;#ffffff&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; spotLight = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; THREE.SpotLight(pointColor);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;5-创建3D实体&quot;&gt;&lt;a href=&quot;#5-创建3D实体&quot; class=&quot;headerlink&quot; title=&quot;5. 创建3D实体&quot;&gt;&lt;/a&gt;5. 创建3D实体&lt;/h2&gt;&lt;p&gt;万事具备，只差造人了（额，我们还是先从一个立方体开始比较实际 ||^ ^）&lt;br&gt;在threejs中创建3D实体只需三步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建结构（骨架）&lt;/li&gt;
&lt;li&gt;创建材质（皮肤）&lt;/li&gt;
&lt;li&gt;在结构上贴材质（造人成功）&lt;br&gt;具体见代码：&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cubeGeometry = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; THREE.CubeGeometry(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cubeMaterial = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; THREE.MeshLambertMaterial(&amp;#123;color:&lt;span class=&quot;number&quot;&gt;0xff0000&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cube = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; THREE.Mesh(cubeGeometry,cubeMaterial);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;6-创建渲染器&quot;&gt;&lt;a href=&quot;#6-创建渲染器&quot; class=&quot;headerlink&quot; title=&quot;6. 创建渲染器&quot;&gt;&lt;/a&gt;6. 创建渲染器&lt;/h2&gt;&lt;p&gt;渲染器是什么，额，你可以把它理解成上帝。所有的角色都已准备就绪，这时就需要上帝这个导演来安排其他人的站位和台词等等。（嘘！其实我们就是那个创造上帝的……）&lt;br&gt;创建上帝，哦不，是渲染器也很简单。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; renderer = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; THREE.WebGLRenderer();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;renderer.setClearColor(&lt;span class=&quot;number&quot;&gt;0xEEEEEE&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;renderer.setSize(&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.innerWidth,&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.innerHeight);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;7-创造世界！&quot;&gt;&lt;a href=&quot;#7-创造世界！&quot; class=&quot;headerlink&quot; title=&quot;7. 创造世界！&quot;&gt;&lt;/a&gt;7. 创造世界！&lt;/h2&gt;&lt;p&gt;接下来需要将所有对象放进场景中，并对场景渲染，世界就诞生了！&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 设置cube位置&lt;/span&gt;
cube.position.set(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);

&lt;span class=&quot;comment&quot;&gt;// 设置camera位置和朝向&lt;/span&gt;
camera.position.set(&lt;span class=&quot;number&quot;&gt;-30&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;);
camera.lookAt(cube.position);

&lt;span class=&quot;comment&quot;&gt;// 设置ambientLight位置&lt;/span&gt;
ambientLight.position.set(&lt;span class=&quot;number&quot;&gt;-40&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-10&lt;/span&gt;);

&lt;span class=&quot;comment&quot;&gt;// 将灯光和3D实体放进scene&lt;/span&gt;
scene.add(cube);
scene.add(spotLight);
scene.add(ambientLight);

&lt;span class=&quot;comment&quot;&gt;// 将renderer节点添加到HTML中&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&quot;WebGL-output&quot;&lt;/span&gt;).append(renderer.domElement);

&lt;span class=&quot;comment&quot;&gt;// 渲染&lt;/span&gt;
renderer.render(scene,camera);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;至此，一个简单的3D场景就创建成功了。总结以下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;threejs将WebGL进行模块化处理，所有的实体都当做对象处理（如场景，灯光，物体，渲染器等）。&lt;/li&gt;
&lt;li&gt;threejs将脏活累活都干完了（如对点线面进行渲染，物体的运动等需要大量的几代和高数知识），剩余的创造性的东西留给我们来做。&lt;/li&gt;
&lt;li&gt;距离创造真实的世界还有很长一段路要走。&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;创建三维图像的一般步骤&quot;&gt;&lt;a href=&quot;#创建三维图像的一般步骤&quot; class=&quot;headerlink&quot; title=&quot;创建三维图像的一般步骤&quot;&gt;&lt;/a&gt;创建三维图像的一般步骤&lt;/h1&gt;&lt;h2 id=&quot;1-创建HTML的基本骨架&quot;&gt;&lt;a href=&quot;#1-创建HTML的基本骨架&quot; class=&quot;headerlink&quot; title=&quot;1. 创建HTML的基本骨架&quot;&gt;&lt;/a&gt;1. 创建HTML的基本骨架&lt;/h2&gt;
    
    </summary>
    
      <category term="web" scheme="http://daikanshan.github.io/categories/web/"/>
    
    
      <category term="threejs" scheme="http://daikanshan.github.io/tags/threejs/"/>
    
  </entry>
  
  <entry>
    <title>动态规划之矩阵连乘</title>
    <link href="http://daikanshan.github.io/2016/04/29/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E7%9F%A9%E9%98%B5%E8%BF%9E%E4%B9%98/"/>
    <id>http://daikanshan.github.io/2016/04/29/动态规划之矩阵连乘/</id>
    <published>2016-04-29T15:33:27.000Z</published>
    <updated>2016-04-30T03:21:39.642Z</updated>
    
    <content type="html">&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* p是一系列矩阵的系数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* n是矩阵的个数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* m[x][y]是当前第x个矩阵到第y个矩阵的最优连乘&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* s[x][y]是记录当前第x个矩阵到第y个矩阵的最优断开位置（k）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!-- more --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MatrixChain&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *p,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; **m,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; **s)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;i&amp;lt;=n;i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    m[i][i] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; r=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;r&amp;lt;=n;r++) &amp;#123; &lt;span class=&quot;comment&quot;&gt;//自底向上的动规&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;i&amp;lt;=n-r+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j=i+r&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      m[i][j] = m[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j]+p[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]*p[i]*p[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      s[i][j] = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k=i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;k&amp;lt;j;k++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; t = m[i][k]+m[k+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j]+p[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]*p[k]*p[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(t&amp;lt;m[i][j])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          m[i][j] = t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          s[i][j] = k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>探索动态规划的本质</title>
    <link href="http://daikanshan.github.io/2016/04/29/%E6%8E%A2%E7%B4%A2%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%9A%84%E6%9C%AC%E8%B4%A8/"/>
    <id>http://daikanshan.github.io/2016/04/29/探索动态规划的本质/</id>
    <published>2016-04-29T15:26:59.000Z</published>
    <updated>2016-04-30T03:21:54.578Z</updated>
    
    <content type="html">&lt;h2 id=&quot;一、什么是动态规划：&quot;&gt;&lt;a href=&quot;#一、什么是动态规划：&quot; class=&quot;headerlink&quot; title=&quot;一、什么是动态规划：&quot;&gt;&lt;/a&gt;一、什么是动态规划：&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;dynamic programming&lt;/strong&gt; is a method for solving a complex problem by breaking&lt;br&gt;it down into a collection of simpler subproblems, solving each of those subproblems&lt;br&gt;just once, and storing their solutions - ideally, using a memory-based data structure.&lt;a href=&quot;https://en.wikipedia.org/wiki/Dynamic_programming&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;^1&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;以上定义摘自维基百科&lt;/p&gt;
&lt;p&gt;下面则是百度百科里的解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;动态规划常常适用于有&lt;strong&gt;重叠子问题&lt;/strong&gt;和&lt;strong&gt;最优子结构&lt;/strong&gt;性质的问题，动态规划方法所耗时间往往远少于朴素解法。&lt;/p&gt;
&lt;p&gt;动态规划背后的基本思想非常简单。大致上，若要解一个给定问题，我们需要解其不同部分（即子问题），&lt;br&gt;再合并子问题的解以得出原问题的解。&lt;/p&gt;
&lt;p&gt;通常许多子问题非常相似，为此动态规划法试图仅仅解决每个子问题一次，从而减少计算量：一旦某个给&lt;br&gt;定子问题的解已经算出，则将其记忆化存储，以便下次需要同一个子问题解之时直接查表。这种做法在重&lt;br&gt;复子问题的数目关于输入的规模呈指数增长时特别有用。&lt;a href=&quot;摘自《算法导论》之“动态规划”&quot;&gt;^2&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由此，我们可以简略的概括下：“动态规划”通过把原来较复杂的问题递归的分解&lt;br&gt;为一组较简单的子问题，并通过存储每个子问题的解，使得每个子问题只计算一次就可以解决原问题的思想。&lt;/p&gt;
&lt;p&gt;这里的某一类问题通常情况下是指某些&lt;strong&gt;最优化问题&lt;/strong&gt;。这类问题可以有很多可行解，每个解都有一个值&lt;br&gt;，我们希望寻找具有最优值（最小值或最大值）的解。[^3]&lt;/p&gt;
&lt;p&gt;一言以蔽之——“动态规划”是解决某类问题的方法（或思想而不是算法）&lt;/p&gt;
&lt;p&gt;根据以上定义，很多人可能会觉得动态规划的真谛就是通过递归或递推，用&lt;strong&gt;额外的空间记录下已解决的子问题的解&lt;/strong&gt;，&lt;br&gt;从而通过空间换时间来降低时间复杂度。其实不然，动态规划的本质是&lt;em&gt;对每个阶段&lt;strong&gt;状态&lt;/strong&gt;的定义以及当前状态与下一阶段&lt;strong&gt;状态&lt;br&gt;关系&lt;/strong&gt;的定义（状态转移方程）&lt;/em&gt;。而所谓的“存储每个子问题的解”则是隐含的包含在状态关系里，那些“额外的记录空间”&lt;br&gt;则只是其表现形式而非其内涵。&lt;/p&gt;
&lt;h2 id=&quot;二、什么是状态？什么是状态转移方程？&quot;&gt;&lt;a href=&quot;#二、什么是状态？什么是状态转移方程？&quot; class=&quot;headerlink&quot; title=&quot;二、什么是状态？什么是状态转移方程？&quot;&gt;&lt;/a&gt;二、什么是状态？什么是状态转移方程？&lt;/h2&gt;&lt;p&gt;什么是状态？&lt;/p&gt;
&lt;p&gt;我们先从最简单的Fibonacci数列谈起：&lt;/p&gt;
&lt;p&gt;比如说我想计算第100个非波那契数，每一个非波那契数就是这个问题的一个状态，每求一个新数字只需要之前的两个状态。&lt;br&gt;所以同一个时刻，最多只需要保存两个状态，空间复杂度就是常数；每计算一个新状态所需要的时间也是常数且状态是线性&lt;br&gt;递增的，所以时间复杂度也是线性的。上面这种状态计算很直接，只需要依照固定的模式从旧状态计算出新状态就行&lt;br&gt;（a[i]=a[i-1]+a[i-2]），不需要考虑是不是需要更多的状态，也不需要选择哪些旧状态来计算新状态。&lt;/p&gt;
&lt;p&gt;我们再来看一个动态规划的教学必备题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个数列，长度为N，求这个数列的最长上升（递增）子数列（LIS）的长度.以1 7 2 8 3 4为例。这个数列&lt;br&gt;的最长递增子数列是 1 2 3 4，长度为4；次长的长度为3， 包括 1 7 8; 1 2 3 等.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要解决这个问题，我们首先要定义这个问题和这个问题的子问题。有人可能会问了，题目都已经在这了，我们还&lt;br&gt;需定义这个问题吗？需要，原因就是这个问题在字面上看，找不出子问题，而没有子问题，这个题目就没办法解决。&lt;br&gt;所以我们来重新定义这个问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个数列，长度为N，&lt;/p&gt;
&lt;p&gt;设F(k)为：以数列中第k项结尾的最长递增子序列的长度.&lt;/p&gt;
&lt;p&gt;求F(1)..F(N)中的最大值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;显然，这个新问题与原问题等价。而对于F(k)来讲，F(1)..F(k-1)都是F(k)的子问题：因为以第k项结尾的最长递&lt;br&gt;增子序列（下称LIS），包含着以第1..k-1中某项结尾的LIS。上述的新问题就可以叫做状态，定义中的“为数列中第&lt;br&gt;k项结尾的LIS的长度”，就叫做对状态的定义。&lt;/p&gt;
&lt;p&gt;什么是状态转移方程？&lt;/p&gt;
&lt;p&gt;上述状态定义好之后，状态和状态之间的关系式，就叫做状态转移方程。&lt;/p&gt;
&lt;p&gt;比如，对于LIS问题。&lt;br&gt;设F(k)：以数列中第k项结尾的最长递增子序列的长度.&lt;br&gt;设A为题中数列，状态转移方程为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;F(1) = 1（根据状态定义导出边界情况）&lt;/p&gt;
&lt;p&gt;F(k) = max(F(i)+1|A(k)&amp;gt;A(i),i∈(1..k-1))(k&amp;gt;1)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用文字解释一下是：以第k项结尾的LIS的长度是：保证第i项比第k项小的情况下，以第i项结尾的LIS长度加一的最大值，&lt;br&gt;取遍i的所有值（i小于k）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;状态转移方程就是带有条件的递推式&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;三、动态规划本质的探索：&quot;&gt;&lt;a href=&quot;#三、动态规划本质的探索：&quot; class=&quot;headerlink&quot; title=&quot;三、动态规划本质的探索：&quot;&gt;&lt;/a&gt;三、动态规划本质的探索：&lt;/h2&gt;&lt;p&gt;对于上述LIS问题我们可以进一步探索。&lt;br&gt;Talk is cheap , show me the code:&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lis&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; A[], &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *d = new &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[n];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;n; ++i)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        d[i] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j&amp;lt;i; ++j)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(A[j]&amp;lt;=A[i] &amp;amp;&amp;amp; d[j]+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;gt;d[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                d[i] = d[j] + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(d[i]&amp;gt;len) len = d[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt;[] d;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return len;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; A[] = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;lis(A, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;)&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们看到，这里多定义了一个数组d来存储每个阶段（状态）的最大值，即所谓的额外的存储空间，然而&lt;br&gt;这并不是动态规划的本质，通过上文的分析，我们知道，下一阶段的状态可由上一阶段的状态得到（我们已经定义了&lt;br&gt;状态和状态转移方程）。因此，额外的数组d是为了保存每个当前状态而开设的，如果没有状态及状态转移方程的定义，&lt;br&gt;数组d是没有任何意义的，换句话说额外的存储空间依附于前后状态的关系，因为有了状态关系才有了额外的存储空间。&lt;/p&gt;
&lt;p&gt;再拿fibonacci数列举例：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;定义fib(n):fibonacci数列第n项的值。&lt;/p&gt;
&lt;p&gt;求解第10项fibonacci数列fib(10)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们可以定义状态：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第n个状态为fib(n)的值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;状态转移方程：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;fib(1)=1,fib(2)=1&lt;/p&gt;
&lt;p&gt;fib(k) = fib(k-1)+fib(k-2) (k&amp;gt;2)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里，我们可以通过多定义一个数组d来保存每个状态的值：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostram&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *d;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  d[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = d[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;i&amp;lt;=n;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    d[i] = d[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]+d[i&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return d[n];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;fib(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的数组d是为了保存每个状态而定义的，其实我们也可以不用开辟额外的存储空间来定义这个数组d：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostram&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a,b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  a = b =&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;i&amp;lt;=n;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t = a+b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a = b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    b = t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;fib(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;至于LIS问题能不能不使用额外的存储空间呢，答案是否定的。为什么，因为其状态转移方程的表示”F(k) = max(F(i)+1|A(k)&amp;gt;A(i),i∈(1..k-1))(k&amp;gt;1)”&lt;br&gt;注定了使用一个额外的数组会更方便点。&lt;/p&gt;
&lt;p&gt;由此可见，动态规划的本质是&lt;em&gt;对每个阶段&lt;strong&gt;状态&lt;/strong&gt;的定义以及当前状态与下一阶段&lt;strong&gt;状态&lt;br&gt;关系&lt;/strong&gt;的定义（状态转移方程）&lt;/em&gt;，而不是所谓的记忆化存储。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、什么是动态规划：&quot;&gt;&lt;a href=&quot;#一、什么是动态规划：&quot; class=&quot;headerlink&quot; title=&quot;一、什么是动态规划：&quot;&gt;&lt;/a&gt;一、什么是动态规划：&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;dynamic programming&lt;/strong&gt; is a method for solving a complex problem by breaking&lt;br&gt;it down into a collection of simpler subproblems, solving each of those subproblems&lt;br&gt;just once, and storing their solutions - ideally, using a memory-based data structure.&lt;a href=&quot;https://en.wikipedia.org/wiki/Dynamic_programming&quot;&gt;^1&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
