<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lisiur&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://daikanshan.github.io/"/>
  <updated>2016-04-30T12:50:59.254Z</updated>
  <id>http://daikanshan.github.io/</id>
  
  <author>
    <name>Lisiur</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>背包九讲</title>
    <link href="http://daikanshan.github.io/2016/04/30/%E8%83%8C%E5%8C%85%E4%B9%9D%E8%AE%B2/"/>
    <id>http://daikanshan.github.io/2016/04/30/背包九讲/</id>
    <published>2016-04-30T11:42:00.000Z</published>
    <updated>2016-04-30T12:50:59.254Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;《背包问题九讲》笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;第一讲-01背包问题&quot;&gt;&lt;a href=&quot;#第一讲-01背包问题&quot; class=&quot;headerlink&quot; title=&quot;第一讲 01背包问题&quot;&gt;&lt;/a&gt;第一讲 01背包问题&lt;/h1&gt;&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;有N件物品和一个容量为V的背包。第i件物品的费用是c[i],价值是w[i]。求解将哪些物品装入背包可使价&lt;br&gt;值总和最大。&lt;/p&gt;
&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;p&gt;用子问题定义状态：即f[i][v]表示前i件物品恰放入一个容量为v的背包可以获得的最大价值。则其状态转移方程为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; &lt;code&gt;f[i][v]=max{f[i-1][v],f[i-1][v-c[i]]+w[i]}&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;需要说明的一点是，如果f[i][v]已经被求解，则其表示当前v重量下的最优解。&lt;br&gt;也就是说，在求解f[i][v]时，所有f[p]&lt;a href=&quot;p\&amp;lt;i || p==i &amp;amp;&amp;amp; q\&amp;lt;V&quot;&gt;q&lt;/a&gt;的值都是p件物品，q重量下的最优解。&lt;/p&gt;
&lt;p&gt;此时求i件物品在v重量下的最优解，我们只需考虑，第i件物品拿不拿两种情况，&lt;br&gt;若拿，则f[i][v] = f[i-1]&lt;a href=&quot;前i-1件物品，v-c[i]重量下的最优解&quot;&gt;v-c[i]&lt;/a&gt;+w[i]&lt;br&gt;若不拿，则f[i][v] = f[i-1]&lt;a href=&quot;前i-1件物品，v重量下的最优解&quot;&gt;v&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;优化空间复杂度&quot;&gt;&lt;a href=&quot;#优化空间复杂度&quot; class=&quot;headerlink&quot; title=&quot;优化空间复杂度&quot;&gt;&lt;/a&gt;优化空间复杂度&lt;/h2&gt;&lt;p&gt;以上方法的时间和空间复杂度均为O(VN),其中时间复杂度应该已经不能再优化了,但空间复杂度却可以&lt;br&gt;优化到O。&lt;br&gt;先考虑上面讲的基本思路如何实现,肯定是有一个主循环i=1..N,每次算出来二维数组f[i][0..V]的所有值。&lt;br&gt;那么,如果只用一个数组f[0..V],能不能保证第i次循环结束后f[v]中表示的就是我们定义的状态f[i][v]呢?&lt;br&gt;f[i][v]是由f[i-1][v]和f[i-1][v-c[i]]两个子问题递推而来,能否保证在推f[i][v]时(也即在第i次主循环中推f[v]时)能够得到f[i-1][v]和f[i-1][v-c[i]]的值呢?&lt;br&gt;事实上,这要求在每次主循环中我们以v=V..0的顺序推f[v],这样才能保证推f[v]时f[v-c[i]]保存的是状态f[i-1][v-c[i]]的值。(以上为原文)&lt;br&gt;伪代码如下:&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;.N&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; v = V.&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f[v] = max&amp;#123;f[v],f[v-c[i]]+w[i]&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;理解上一段话和伪代码很重要，我们之所以要把V逆序，是因为我们希望在推第i个f[v]（f[i][v]）时，第i-1个f[v]（f[i-1][v]）和f&lt;a href=&quot;f[i-1][v-c[i]]&quot;&gt;v-c[i]&lt;/a&gt;都已经是最优解。&lt;br&gt;换句话说我们要推较大的v时需要知道较小的v，这样就不能先对较小的v做出改变，不然较大的v就没法算了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;《背包问题九讲》笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;第一讲-01背包问题&quot;&gt;&lt;a href=&quot;#第一讲-01背包问题&quot; class=&quot;headerlink&quot; title=&quot;第一讲 01背包问题&quot;&gt;&lt;/a&gt;第一讲 01背包问题&lt;
    
    </summary>
    
      <category term="算法" scheme="http://daikanshan.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="背包" scheme="http://daikanshan.github.io/tags/%E8%83%8C%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>threejs使用概述</title>
    <link href="http://daikanshan.github.io/2016/04/30/threejs%E4%BD%BF%E7%94%A8%E6%A6%82%E8%BF%B0/"/>
    <id>http://daikanshan.github.io/2016/04/30/threejs使用概述/</id>
    <published>2016-04-30T05:34:56.000Z</published>
    <updated>2016-04-30T05:35:40.822Z</updated>
    
    <content type="html">&lt;h1 id=&quot;创建三维图像的一般步骤&quot;&gt;&lt;a href=&quot;#创建三维图像的一般步骤&quot; class=&quot;headerlink&quot; title=&quot;创建三维图像的一般步骤&quot;&gt;&lt;/a&gt;创建三维图像的一般步骤&lt;/h1&gt;&lt;h2 id=&quot;1-创建HTML的基本骨架&quot;&gt;&lt;a href=&quot;#1-创建HTML的基本骨架&quot; class=&quot;headerlink&quot; title=&quot;1. 创建HTML的基本骨架&quot;&gt;&lt;/a&gt;1. 创建HTML的基本骨架&lt;/h2&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;My first WebGL&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 为了更好的展示效果，不然会有溢出 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        body&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            margin:0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            overflow: hidden;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 引入three.js库 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;../lib/three.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;WebGL-output&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-创建场景&quot;&gt;&lt;a href=&quot;#2-创建场景&quot; class=&quot;headerlink&quot; title=&quot;2. 创建场景&quot;&gt;&lt;/a&gt;2. 创建场景&lt;/h2&gt;&lt;p&gt;场景是所有使用threejs创建的3D对象的容器。这些3D对象只能在场景中才能被渲染。创建场景（scene）的代码很简单只需要一行代码：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; scene = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; THREE.Scene();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;3-创建相机&quot;&gt;&lt;a href=&quot;#3-创建相机&quot; class=&quot;headerlink&quot; title=&quot;3. 创建相机&quot;&gt;&lt;/a&gt;3. 创建相机&lt;/h2&gt;&lt;p&gt;可以把相机想象成人的眼睛，正像人如果没有眼睛将什么也看不到一样，如果没有相机你将看不到任何东西。创建相机（camara）的代码也很简单：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** 相机有两种类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  正投影相机和透视相机&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  正投影相机所看到的物体的大小与其位置无关（想象下“模拟城市”的游戏场景）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  透视相机所看到的物体是最自然的视图，相同大小的物体会根据距离相机的远近而显示出不同的大小。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 正投影相机 args=[left,right,top,bottom,near,far](想象成正六面体六个面的位置)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; orthographicCamera = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; THREE.OrthographicCamera(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.innerWidth / &lt;span class=&quot;number&quot;&gt;-16&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.innerWidth / &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.innerHeight / &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.innerHeight / &lt;span class=&quot;number&quot;&gt;-16&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;-200&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 透视相机 args=[fov,aspect,near,far](fov:视场推荐45°，aspect:长宽比，near:从相机多近的地方渲染，far:相机最多能看多远)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; perspectiveCamera = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; THREE.PerspectiveCamera(&lt;span class=&quot;number&quot;&gt;45&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.innerWidth / &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.innerHeight, &lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;4-创建灯光&quot;&gt;&lt;a href=&quot;#4-创建灯光&quot; class=&quot;headerlink&quot; title=&quot;4. 创建灯光&quot;&gt;&lt;/a&gt;4. 创建灯光&lt;/h2&gt;&lt;p&gt;上帝说要有光。所以你懂的，如果没有光，上帝创建的世界还有什么意义呢？Threejs提供了多种光源，基本上能够模拟现实生活中大多数的光源。这里先介绍几种，以后再详细介绍。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** 环境基础光AmbientLight&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  环境基础光不能作为场景的唯一的光源，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  其主要作用是弱化阴影。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ambiColor = &lt;span class=&quot;string&quot;&gt;&#39;#0c0c0c&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ambientLight = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; THREE.AmbientLight(ambiColor);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** 聚光灯光源 SpotLight&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  具有锥形效果的光源，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  也是最长用到的一种光源,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  特别是需要生成阴影时。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pointColor = &lt;span class=&quot;string&quot;&gt;&quot;#ffffff&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; spotLight = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; THREE.SpotLight(pointColor);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;5-创建3D实体&quot;&gt;&lt;a href=&quot;#5-创建3D实体&quot; class=&quot;headerlink&quot; title=&quot;5. 创建3D实体&quot;&gt;&lt;/a&gt;5. 创建3D实体&lt;/h2&gt;&lt;p&gt;万事具备，只差造人了（额，我们还是先从一个立方体开始比较实际 ||^ ^）&lt;br&gt;在threejs中创建3D实体只需三步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建结构（骨架）&lt;/li&gt;
&lt;li&gt;创建材质（皮肤）&lt;/li&gt;
&lt;li&gt;在结构上贴材质（造人成功）&lt;br&gt;具体见代码：&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cubeGeometry = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; THREE.CubeGeometry(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cubeMaterial = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; THREE.MeshLambertMaterial(&amp;#123;color:&lt;span class=&quot;number&quot;&gt;0xff0000&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cube = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; THREE.Mesh(cubeGeometry,cubeMaterial);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;6-创建渲染器&quot;&gt;&lt;a href=&quot;#6-创建渲染器&quot; class=&quot;headerlink&quot; title=&quot;6. 创建渲染器&quot;&gt;&lt;/a&gt;6. 创建渲染器&lt;/h2&gt;&lt;p&gt;渲染器是什么，额，你可以把它理解成上帝。所有的角色都已准备就绪，这时就需要上帝这个导演来安排其他人的站位和台词等等。（嘘！其实我们就是那个创造上帝的……）&lt;br&gt;创建上帝，哦不，是渲染器也很简单。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; renderer = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; THREE.WebGLRenderer();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;renderer.setClearColor(&lt;span class=&quot;number&quot;&gt;0xEEEEEE&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;renderer.setSize(&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.innerWidth,&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.innerHeight);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;7-创造世界！&quot;&gt;&lt;a href=&quot;#7-创造世界！&quot; class=&quot;headerlink&quot; title=&quot;7. 创造世界！&quot;&gt;&lt;/a&gt;7. 创造世界！&lt;/h2&gt;&lt;p&gt;接下来需要将所有对象放进场景中，并对场景渲染，世界就诞生了！&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 设置cube位置&lt;/span&gt;
cube.position.set(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);

&lt;span class=&quot;comment&quot;&gt;// 设置camera位置和朝向&lt;/span&gt;
camera.position.set(&lt;span class=&quot;number&quot;&gt;-30&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;);
camera.lookAt(cube.position);

&lt;span class=&quot;comment&quot;&gt;// 设置ambientLight位置&lt;/span&gt;
ambientLight.position.set(&lt;span class=&quot;number&quot;&gt;-40&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-10&lt;/span&gt;);

&lt;span class=&quot;comment&quot;&gt;// 将灯光和3D实体放进scene&lt;/span&gt;
scene.add(cube);
scene.add(spotLight);
scene.add(ambientLight);

&lt;span class=&quot;comment&quot;&gt;// 将renderer节点添加到HTML中&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&quot;WebGL-output&quot;&lt;/span&gt;).append(renderer.domElement);

&lt;span class=&quot;comment&quot;&gt;// 渲染&lt;/span&gt;
renderer.render(scene,camera);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;至此，一个简单的3D场景就创建成功了。总结以下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;threejs将WebGL进行模块化处理，所有的实体都当做对象处理（如场景，灯光，物体，渲染器等）。&lt;/li&gt;
&lt;li&gt;threejs将脏活累活都干完了（如对点线面进行渲染，物体的运动等需要大量的几代和高数知识），剩余的创造性的东西留给我们来做。&lt;/li&gt;
&lt;li&gt;距离创造真实的世界还有很长一段路要走。&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;创建三维图像的一般步骤&quot;&gt;&lt;a href=&quot;#创建三维图像的一般步骤&quot; class=&quot;headerlink&quot; title=&quot;创建三维图像的一般步骤&quot;&gt;&lt;/a&gt;创建三维图像的一般步骤&lt;/h1&gt;&lt;h2 id=&quot;1-创建HTML的基本骨架&quot;&gt;&lt;a href=&quot;#1-创建HTML的基本骨架&quot; class=&quot;headerlink&quot; title=&quot;1. 创建HTML的基本骨架&quot;&gt;&lt;/a&gt;1. 创建HTML的基本骨架&lt;/h2&gt;
    
    </summary>
    
      <category term="web" scheme="http://daikanshan.github.io/categories/web/"/>
    
    
      <category term="threejs" scheme="http://daikanshan.github.io/tags/threejs/"/>
    
  </entry>
  
  <entry>
    <title>动态规划之矩阵连乘</title>
    <link href="http://daikanshan.github.io/2016/04/29/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E7%9F%A9%E9%98%B5%E8%BF%9E%E4%B9%98/"/>
    <id>http://daikanshan.github.io/2016/04/29/动态规划之矩阵连乘/</id>
    <published>2016-04-29T15:33:27.000Z</published>
    <updated>2016-04-30T03:21:39.642Z</updated>
    
    <content type="html">&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* p是一系列矩阵的系数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* n是矩阵的个数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* m[x][y]是当前第x个矩阵到第y个矩阵的最优连乘&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* s[x][y]是记录当前第x个矩阵到第y个矩阵的最优断开位置（k）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!-- more --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MatrixChain&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *p,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; **m,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; **s)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;i&amp;lt;=n;i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    m[i][i] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; r=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;r&amp;lt;=n;r++) &amp;#123; &lt;span class=&quot;comment&quot;&gt;//自底向上的动规&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;i&amp;lt;=n-r+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j=i+r&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      m[i][j] = m[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j]+p[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]*p[i]*p[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      s[i][j] = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k=i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;k&amp;lt;j;k++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; t = m[i][k]+m[k+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j]+p[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]*p[k]*p[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(t&amp;lt;m[i][j])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          m[i][j] = t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          s[i][j] = k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>探索动态规划的本质</title>
    <link href="http://daikanshan.github.io/2016/04/29/%E6%8E%A2%E7%B4%A2%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%9A%84%E6%9C%AC%E8%B4%A8/"/>
    <id>http://daikanshan.github.io/2016/04/29/探索动态规划的本质/</id>
    <published>2016-04-29T15:26:59.000Z</published>
    <updated>2016-04-30T03:21:54.578Z</updated>
    
    <content type="html">&lt;h2 id=&quot;一、什么是动态规划：&quot;&gt;&lt;a href=&quot;#一、什么是动态规划：&quot; class=&quot;headerlink&quot; title=&quot;一、什么是动态规划：&quot;&gt;&lt;/a&gt;一、什么是动态规划：&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;dynamic programming&lt;/strong&gt; is a method for solving a complex problem by breaking&lt;br&gt;it down into a collection of simpler subproblems, solving each of those subproblems&lt;br&gt;just once, and storing their solutions - ideally, using a memory-based data structure.&lt;a href=&quot;https://en.wikipedia.org/wiki/Dynamic_programming&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;^1&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;以上定义摘自维基百科&lt;/p&gt;
&lt;p&gt;下面则是百度百科里的解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;动态规划常常适用于有&lt;strong&gt;重叠子问题&lt;/strong&gt;和&lt;strong&gt;最优子结构&lt;/strong&gt;性质的问题，动态规划方法所耗时间往往远少于朴素解法。&lt;/p&gt;
&lt;p&gt;动态规划背后的基本思想非常简单。大致上，若要解一个给定问题，我们需要解其不同部分（即子问题），&lt;br&gt;再合并子问题的解以得出原问题的解。&lt;/p&gt;
&lt;p&gt;通常许多子问题非常相似，为此动态规划法试图仅仅解决每个子问题一次，从而减少计算量：一旦某个给&lt;br&gt;定子问题的解已经算出，则将其记忆化存储，以便下次需要同一个子问题解之时直接查表。这种做法在重&lt;br&gt;复子问题的数目关于输入的规模呈指数增长时特别有用。&lt;a href=&quot;摘自《算法导论》之“动态规划”&quot;&gt;^2&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由此，我们可以简略的概括下：“动态规划”通过把原来较复杂的问题递归的分解&lt;br&gt;为一组较简单的子问题，并通过存储每个子问题的解，使得每个子问题只计算一次就可以解决原问题的思想。&lt;/p&gt;
&lt;p&gt;这里的某一类问题通常情况下是指某些&lt;strong&gt;最优化问题&lt;/strong&gt;。这类问题可以有很多可行解，每个解都有一个值&lt;br&gt;，我们希望寻找具有最优值（最小值或最大值）的解。[^3]&lt;/p&gt;
&lt;p&gt;一言以蔽之——“动态规划”是解决某类问题的方法（或思想而不是算法）&lt;/p&gt;
&lt;p&gt;根据以上定义，很多人可能会觉得动态规划的真谛就是通过递归或递推，用&lt;strong&gt;额外的空间记录下已解决的子问题的解&lt;/strong&gt;，&lt;br&gt;从而通过空间换时间来降低时间复杂度。其实不然，动态规划的本质是&lt;em&gt;对每个阶段&lt;strong&gt;状态&lt;/strong&gt;的定义以及当前状态与下一阶段&lt;strong&gt;状态&lt;br&gt;关系&lt;/strong&gt;的定义（状态转移方程）&lt;/em&gt;。而所谓的“存储每个子问题的解”则是隐含的包含在状态关系里，那些“额外的记录空间”&lt;br&gt;则只是其表现形式而非其内涵。&lt;/p&gt;
&lt;h2 id=&quot;二、什么是状态？什么是状态转移方程？&quot;&gt;&lt;a href=&quot;#二、什么是状态？什么是状态转移方程？&quot; class=&quot;headerlink&quot; title=&quot;二、什么是状态？什么是状态转移方程？&quot;&gt;&lt;/a&gt;二、什么是状态？什么是状态转移方程？&lt;/h2&gt;&lt;p&gt;什么是状态？&lt;/p&gt;
&lt;p&gt;我们先从最简单的Fibonacci数列谈起：&lt;/p&gt;
&lt;p&gt;比如说我想计算第100个非波那契数，每一个非波那契数就是这个问题的一个状态，每求一个新数字只需要之前的两个状态。&lt;br&gt;所以同一个时刻，最多只需要保存两个状态，空间复杂度就是常数；每计算一个新状态所需要的时间也是常数且状态是线性&lt;br&gt;递增的，所以时间复杂度也是线性的。上面这种状态计算很直接，只需要依照固定的模式从旧状态计算出新状态就行&lt;br&gt;（a[i]=a[i-1]+a[i-2]），不需要考虑是不是需要更多的状态，也不需要选择哪些旧状态来计算新状态。&lt;/p&gt;
&lt;p&gt;我们再来看一个动态规划的教学必备题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个数列，长度为N，求这个数列的最长上升（递增）子数列（LIS）的长度.以1 7 2 8 3 4为例。这个数列&lt;br&gt;的最长递增子数列是 1 2 3 4，长度为4；次长的长度为3， 包括 1 7 8; 1 2 3 等.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要解决这个问题，我们首先要定义这个问题和这个问题的子问题。有人可能会问了，题目都已经在这了，我们还&lt;br&gt;需定义这个问题吗？需要，原因就是这个问题在字面上看，找不出子问题，而没有子问题，这个题目就没办法解决。&lt;br&gt;所以我们来重新定义这个问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个数列，长度为N，&lt;/p&gt;
&lt;p&gt;设F(k)为：以数列中第k项结尾的最长递增子序列的长度.&lt;/p&gt;
&lt;p&gt;求F(1)..F(N)中的最大值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;显然，这个新问题与原问题等价。而对于F(k)来讲，F(1)..F(k-1)都是F(k)的子问题：因为以第k项结尾的最长递&lt;br&gt;增子序列（下称LIS），包含着以第1..k-1中某项结尾的LIS。上述的新问题就可以叫做状态，定义中的“为数列中第&lt;br&gt;k项结尾的LIS的长度”，就叫做对状态的定义。&lt;/p&gt;
&lt;p&gt;什么是状态转移方程？&lt;/p&gt;
&lt;p&gt;上述状态定义好之后，状态和状态之间的关系式，就叫做状态转移方程。&lt;/p&gt;
&lt;p&gt;比如，对于LIS问题。&lt;br&gt;设F(k)：以数列中第k项结尾的最长递增子序列的长度.&lt;br&gt;设A为题中数列，状态转移方程为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;F(1) = 1（根据状态定义导出边界情况）&lt;/p&gt;
&lt;p&gt;F(k) = max(F(i)+1|A(k)&amp;gt;A(i),i∈(1..k-1))(k&amp;gt;1)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用文字解释一下是：以第k项结尾的LIS的长度是：保证第i项比第k项小的情况下，以第i项结尾的LIS长度加一的最大值，&lt;br&gt;取遍i的所有值（i小于k）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;状态转移方程就是带有条件的递推式&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;三、动态规划本质的探索：&quot;&gt;&lt;a href=&quot;#三、动态规划本质的探索：&quot; class=&quot;headerlink&quot; title=&quot;三、动态规划本质的探索：&quot;&gt;&lt;/a&gt;三、动态规划本质的探索：&lt;/h2&gt;&lt;p&gt;对于上述LIS问题我们可以进一步探索。&lt;br&gt;Talk is cheap , show me the code:&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lis&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; A[], &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *d = new &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[n];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;n; ++i)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        d[i] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j&amp;lt;i; ++j)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(A[j]&amp;lt;=A[i] &amp;amp;&amp;amp; d[j]+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;gt;d[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                d[i] = d[j] + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(d[i]&amp;gt;len) len = d[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt;[] d;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return len;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; A[] = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;lis(A, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;)&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们看到，这里多定义了一个数组d来存储每个阶段（状态）的最大值，即所谓的额外的存储空间，然而&lt;br&gt;这并不是动态规划的本质，通过上文的分析，我们知道，下一阶段的状态可由上一阶段的状态得到（我们已经定义了&lt;br&gt;状态和状态转移方程）。因此，额外的数组d是为了保存每个当前状态而开设的，如果没有状态及状态转移方程的定义，&lt;br&gt;数组d是没有任何意义的，换句话说额外的存储空间依附于前后状态的关系，因为有了状态关系才有了额外的存储空间。&lt;/p&gt;
&lt;p&gt;再拿fibonacci数列举例：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;定义fib(n):fibonacci数列第n项的值。&lt;/p&gt;
&lt;p&gt;求解第10项fibonacci数列fib(10)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们可以定义状态：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第n个状态为fib(n)的值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;状态转移方程：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;fib(1)=1,fib(2)=1&lt;/p&gt;
&lt;p&gt;fib(k) = fib(k-1)+fib(k-2) (k&amp;gt;2)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里，我们可以通过多定义一个数组d来保存每个状态的值：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostram&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *d;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  d[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = d[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;i&amp;lt;=n;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    d[i] = d[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]+d[i&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return d[n];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;fib(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的数组d是为了保存每个状态而定义的，其实我们也可以不用开辟额外的存储空间来定义这个数组d：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostram&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a,b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  a = b =&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;i&amp;lt;=n;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t = a+b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a = b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    b = t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;fib(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;至于LIS问题能不能不使用额外的存储空间呢，答案是否定的。为什么，因为其状态转移方程的表示”F(k) = max(F(i)+1|A(k)&amp;gt;A(i),i∈(1..k-1))(k&amp;gt;1)”&lt;br&gt;注定了使用一个额外的数组会更方便点。&lt;/p&gt;
&lt;p&gt;由此可见，动态规划的本质是&lt;em&gt;对每个阶段&lt;strong&gt;状态&lt;/strong&gt;的定义以及当前状态与下一阶段&lt;strong&gt;状态&lt;br&gt;关系&lt;/strong&gt;的定义（状态转移方程）&lt;/em&gt;，而不是所谓的记忆化存储。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、什么是动态规划：&quot;&gt;&lt;a href=&quot;#一、什么是动态规划：&quot; class=&quot;headerlink&quot; title=&quot;一、什么是动态规划：&quot;&gt;&lt;/a&gt;一、什么是动态规划：&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;dynamic programming&lt;/strong&gt; is a method for solving a complex problem by breaking&lt;br&gt;it down into a collection of simpler subproblems, solving each of those subproblems&lt;br&gt;just once, and storing their solutions - ideally, using a memory-based data structure.&lt;a href=&quot;https://en.wikipedia.org/wiki/Dynamic_programming&quot;&gt;^1&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
